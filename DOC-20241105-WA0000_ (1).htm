<html><head><base href="https://websimtrading.com/?">
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Simulador de Trading</title>
<style>
  /* Reset de estilos */
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: 'Roboto', sans-serif;
    background-color: #1a1a1a;
    color: #ffffff;
  }

  .container {
    padding: 10px;
    max-width: 100%;
  }

  /* Cabeçalho */
  .header {
    background-color: #2a2a2a;
    padding: 15px;
    text-align: center;
    border-bottom: 2px solid #3a3a3a;
  }

  /* Container principal */
  .main-container {
    display: flex;
    flex-direction: column;
    gap: 15px;
    padding: 10px;
  }

  /* Seção do gráfico */
  .chart-section {
    background: #2a2a2a;
    border-radius: 8px;
    padding: 15px;
    height: 50vh;
    position: relative;
  }

  /* Painel de trading */
  .trading-panel {
    background: #2a2a2a;
    border-radius: 8px;
    padding: 15px;
  }

  /* Formulário de ordens */
  .order-form {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 10px;
    margin-bottom: 15px;
  }

  /* Inputs e botões */
  input, select, button {
    width: 100%;
    padding: 12px;
    border-radius: 4px;
    border: 1px solid #3a3a3a;
    background: #333;
    color: white;
    font-size: 16px;
  }

  button {
    background: #4CAF50;
    border: none;
    cursor: pointer;
    transition: background 0.3s;
    grid-column: 1 / -1;
  }

  button:hover {
    background: #45a049;
  }

  /* Book de ofertas */
  .order-book {
    background: #2a2a2a;
    border-radius: 8px;
    padding: 15px;
    margin-top: 15px;
  }

  .order-row {
    display: flex;
    justify-content: space-between;
    padding: 8px;
    border-bottom: 1px solid #3a3a3a;
  }

  .buy { color: #4CAF50; }
  .sell { color: #f44336; }

  /* Histórico de trades */
  .trade-history {
    background: #2a2a2a;
    border-radius: 8px;
    padding: 15px;
    margin-top: 15px;
    max-height: 200px;
    overflow-y: auto;
  }

  /* Saldo */
  .balance {
    background: #2a2a2a;
    padding: 15px;
    border-radius: 8px;
    text-align: center;
    font-size: 1.2em;
    margin-bottom: 15px;
  }

  /* Responsividade */
  @media (max-width: 768px) {
    .order-form {
      grid-template-columns: 1fr;
    }
    
    .chart-section {
      height: 40vh;
    }
    
    .balance {
      font-size: 1em;
    }
  }

  /* Scrollbar personalizada */
  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    background: #2a2a2a;
  }

  ::-webkit-scrollbar-thumb {
    background: #4a4a4a;
    border-radius: 4px;
  }

  /* Animações */
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  .fade-in {
    animation: fadeIn 0.3s ease-in;
  }
</style>
</head>
<body>
  <div class="header">
    <h1>WebSim Trading</h1>
  </div>

  <div class="main-container">
    <div class="balance">
      Saldo: $<span id="balance">10000.00</span>
    </div>

    <div class="chart-section">
      <canvas id="priceChart"></canvas>
    </div>

    <div class="trading-panel">
      <form id="orderForm" class="order-form">
        <select id="orderType">
          <option value="buy">Comprar</option>
          <option value="sell">Vender</option>
        </select>
        <input type="number" id="quantity" placeholder="Quantidade" step="0.0001" min="0.0001" required>
        <input type="number" id="price" placeholder="Preço" step="0.01" required>
        <button type="submit">Enviar Ordem</button>
      </form>
    </div>

    <div class="order-book">
      <h3>Book de Ofertas</h3>
      <div id="orderBookContent"></div>
    </div>

    <div class="trade-history">
      <h3>Histórico de Operações</h3>
      <div id="tradeHistory"></div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    let balance = 10000;
    let currentPrice = 31000;
    let tradeHistory = [];
    let orderBook = {
      bids: [],
      asks: []
    };

    // Inicialização do gráfico
    const ctx = document.getElementById('priceChart').getContext('2d');
    const chart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: [],
        datasets: [{
          label: 'Preço BTC/USD',
          data: [],
          borderColor: '#4CAF50',
          tension: 0.4
        }]
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
          mode: 'index'
        },
        scales: {
          y: {
            beginAtZero: false,
            grid: {
              color: '#333'
            }
          }
        },
        plugins: {
          legend: {
            display: false
          }
        }
      }
    });

    // Atualização do preço
    function updatePrice() {
      currentPrice += (Math.random() - 0.5) * 100;
      const time = new Date().toLocaleTimeString();
      
      if (chart.data.labels.length > 50) {
        chart.data.labels.shift();
        chart.data.datasets[0].data.shift();
      }
      
      chart.data.labels.push(time);
      chart.data.datasets[0].data.push(currentPrice);
      
      // Atualiza cor baseada na direção do preço
      const dataSet = chart.data.datasets[0];
      const lastTwo = dataSet.data.slice(-2);
      if (lastTwo.length === 2) {
        dataSet.borderColor = lastTwo[1] >= lastTwo[0] ? '#4CAF50' : '#f44336';
      }
      
      chart.update('none');
    }

    // Inicialização do book de ofertas
    function initializeOrderBook() {
      for (let i = 0; i < 10; i++) {
        orderBook.bids.push({
          price: currentPrice - (Math.random() * 500),
          amount: +(Math.random() * 2).toFixed(4)
        });
        
        orderBook.asks.push({
          price: currentPrice + (Math.random() * 500),
          amount: +(Math.random() * 2).toFixed(4)
        });
      }
      
      orderBook.bids.sort((a, b) => b.price - a.price);
      orderBook.asks.sort((a, b) => a.price - b.price);
      renderOrderBook();
    }

    // Renderização do book de ofertas
    function renderOrderBook() {
      const bookElement = document.getElementById('orderBookContent');
      bookElement.innerHTML = '';
      
      orderBook.asks.slice(0, 5).reverse().forEach(ask => {
        const row = document.createElement('div');
        row.className = 'order-row sell';
        row.innerHTML = `${ask.price.toFixed(2)} | ${ask.amount.toFixed(4)}`;
        bookElement.appendChild(row);
      });
      
      const spreadRow = document.createElement('div');
      spreadRow.className = 'order-row';
      spreadRow.innerHTML = '--- Spread ---';
      bookElement.appendChild(spreadRow);
      
      orderBook.bids.slice(0, 5).forEach(bid => {
        const row = document.createElement('div');
        row.className = 'order-row buy';
        row.innerHTML = `${bid.price.toFixed(2)} | ${bid.amount.toFixed(4)}`;
        bookElement.appendChild(row);
      });
    }

    // Manipulação de ordens
    document.getElementById('orderForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const type = document.getElementById('orderType').value;
      const quantity = parseFloat(document.getElementById('quantity').value);
      const price = parseFloat(document.getElementById('price').value);
      
      const total = quantity * price;
      
      if (type === 'buy' && total <= balance) {
        balance -= total;
        addToHistory(type, quantity, price);
        if (type === 'buy') {
          orderBook.bids.push({ price, amount: quantity });
          orderBook.bids.sort((a, b) => b.price - a.price);
        } else {
          orderBook.asks.push({ price, amount: quantity });
          orderBook.asks.sort((a, b) => a.price - b.price);
        }
      } else if (type === 'sell') {
        balance += total;
        addToHistory(type, quantity, price);
      }
      
      document.getElementById('balance').textContent = balance.toFixed(2);
      renderOrderBook();
      this.reset();
    });

    // Adicionar ao histórico
    function addToHistory(type, quantity, price) {
      const time = new Date().toLocaleTimeString();
      tradeHistory.unshift({
        time,
        type,
        quantity,
        price,
        total: (quantity * price).toFixed(2)
      });
      
      renderTradeHistory();
    }

    // Renderizar histórico
    function renderTradeHistory() {
      const historyElement = document.getElementById('tradeHistory');
      historyElement.innerHTML = '';
      
      tradeHistory.forEach(trade => {
        const row = document.createElement('div');
        row.className = `order-row ${trade.type}`;
        row.innerHTML = `
          ${trade.time} - ${trade.type === 'buy' ? 'Compra' : 'Venda'}
          ${trade.quantity} BTC @ $${trade.price} 
          Total: $${trade.total}
        `;
        historyElement.appendChild(row);
      });
    }

    // Inicialização e intervalos
    initializeOrderBook();
    setInterval(updatePrice, 1000);
    setInterval(() => {
      // Atualização aleatória do book
      if (Math.random() > 0.7) {
        orderBook.bids = orderBook.bids.slice(1);
        orderBook.asks = orderBook.asks.slice(1);
        
        orderBook.bids.push({
          price: currentPrice - (Math.random() * 500),
          amount: +(Math.random() * 2).toFixed(4)
        });
        
        orderBook.asks.push({
          price: currentPrice + (Math.random() * 500),
          amount: +(Math.random() * 2).toFixed(4)
        });
        
        orderBook.bids.sort((a, b) => b.price - a.price);
        orderBook.asks.sort((a, b) => a.price - b.price);
        renderOrderBook();
      }
    }, 2000);
  </script>
</body>
</html>